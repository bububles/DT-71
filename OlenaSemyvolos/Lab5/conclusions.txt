Пример вывода:
Time of operations in nanoseconds:
             |     Add       |    Search    |   Remove
-------------+---------------+--------------+-----------
Linked List  |	19717500	 |  6953300	   |  14186800
Array List   |	19614000	 |  7146200	   |  2512962600
Treeset      |	138650500	 |  59800	   |  89931400
Hashset      |	48879500	 |  7100	   |  24210000

По добавлению элементов быстрее всех AL LL, дальше с отрывом HS, TS
По поиску: HS, TS, LL AL
По удалению: LL HS, TS, AL

Такой разброс можно объяснить принципом постоения коллекций и принципом работы алгоритмов.
AL -- это список, очень похожий на массив, но который имеет произвольную длину.
Поэтому элементы добавляются быстро (просто в конец), а вот искать будет долго.
Логичнее использовать, если список нужет просто для хранения информации (не нужно удалять из середины или искать элементы)

LL -- двухсвязный список. выводы по добавленю/поиску такие же как и с AL, но удаление тут происходит быстрее всего

TS хранит элементы уже отсортироваными. Поэтому поиск происходит быстро, а вот добавление нет
(нужно выполнять больше прохождений для нахождения нужного места)

HS хранит элементы в произвольном порядке. Создан для случаев, когда порядок не важен, а важна скорость.
Поэтому и быстрее всего ищет.